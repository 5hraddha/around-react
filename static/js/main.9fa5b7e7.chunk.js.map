{"version":3,"sources":["images/logo.svg","components/Header.js","contexts/CurrentUserContext.js","components/Card.js","components/Main.js","components/ImagePopup.js","components/PopupWithForm.js","components/EditProfilePopup.js","components/EditAvatarPopup.js","components/AddPlacePopup.js","components/DeletePlacePopup.js","components/Footer.js","utils/api.js","components/App.js","index.js"],"names":["Header","className","src","pageLogo","alt","CurrentUserContext","React","createContext","Card","props","card","onCardClick","onCardLike","onCardDeleteClick","currentUser","useContext","isOwn","owner","_id","cardDeleteButtonClassName","isLiked","likes","some","i","cardLikeButtonClassName","link","name","onClick","type","length","Main","cards","onEditProfileClick","onAddPlaceClick","onEditAvatarClick","avatar","about","map","ImagePopup","onClose","PopupWithForm","children","onSubmit","title","btnLabel","isOpen","formRef","createRef","useState","isFormValid","setIsFormValid","useEffect","current","checkValidity","action","ref","onChange","noValidate","EditProfilePopup","isDataLoading","onUpdateUser","setName","description","setDescription","isNameValid","setIsNameValid","isDescriptionValid","setIsDescriptionValid","nameErrorMessage","setNameErrorMessage","descriptionErrorMessage","setDescriptionErrorMessage","handleInputChange","e","target","value","validity","validationMessage","valid","preventDefault","id","placeholder","minLength","maxLength","required","EditAvatarPopup","onUpdateAvatar","isImageLinkValid","setIsImageLinkValid","imageLinkErrorMessage","setImageLinkErrorMessage","imageLinkInputRef","useRef","AddPlacePopup","onAddPlace","cardName","setCardName","cardImageLink","setCardImageLink","isCardNameValid","setIsCardNameValid","isCardImageLinkValid","setIsCardImageLinkValid","cardNameErrorMessage","setCardNameErrorMessage","cardImageLinkErrorMessage","setCardImageLinkErrorMessage","DeletePlacePopup","onCardDelete","Footer","options","_checkResponseStatus","response","ok","json","Promise","reject","status","statusText","getInitialCards","fetch","_baseUrl","headers","_headers","then","addNewCard","cardPicUrl","method","body","JSON","stringify","deleteCard","cardId","changeLikeCardStatus","getUserData","updateUserData","updateUserAvatar","newAvatarUrl","this","baseUrl","authorization","App","isEditProfilePopupOpen","setIsEditProfilePopupOpen","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isPreviewPlacePopupOpen","setIsPreviewPlacePopupOpen","isDeletePlacePopupOpen","setIsDeletePlacePopupOpen","setIsDataLoading","selectedCard","setSelectedCard","selectedToDeleteCard","setSelectedToDeleteCard","setCurrentUser","setCards","api","catch","err","console","log","res","handleClickClose","classList","contains","closeAllPopups","handleEscClose","key","document","addEventListener","removeEventListener","Provider","newCard","state","c","updatedUserData","finally","userData","filter","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9fa5b7e7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.3755f99c.svg\";","import React        from 'react';\nimport pageLogo     from '../images/logo.svg';\n\n/**\n * The **Header** component representing the header of the webpage\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction Header() {\n  return (\n    <header className=\"header\">\n      <img className=\"logo\" src={pageLogo} alt=\"logo of the webpage having text around the US\" />\n    </header>\n  );\n}\n\nexport default Header;","import React from 'react';\n\n/** A context having the value of the current user */\nconst CurrentUserContext = React.createContext();\nexport default CurrentUserContext;","import React                from 'react';\nimport PropTypes            from 'prop-types';\nimport CurrentUserContext   from '../contexts/CurrentUserContext';\n\n/**\n * The **Card** component representing an image card in the webpage\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction Card(props){\n  const { card, onCardClick, onCardLike, onCardDeleteClick } = props;\n  const currentUser = React.useContext(CurrentUserContext);\n\n  // Check if the current user is the owner of the current card and set className for Delete button accordingly\n  const isOwn = card.owner._id === currentUser._id;\n  const cardDeleteButtonClassName = (\n    `element__delete-btn ${isOwn\n      ? 'element__delete-btn_visible'\n      : 'element__delete-btn_hidden'}`\n  );\n\n  // Check if the card was liked by the current user and set className for Like button accordingly\n  const isLiked = card.likes.some(i => i._id === currentUser._id);\n  const cardLikeButtonClassName = `element__like-btn ${(isLiked) && 'element__like-btn_active'}`;\n\n  const handleClick = () => onCardClick(card);\n  const handleLikeClick = () => onCardLike(card);\n  const handleDeleteClick = () => onCardDeleteClick(card);\n\n  return (\n    <li className=\"element\" key={card._id}>\n      <img className=\"element__img\" src={card.link} alt={card.name} onClick={handleClick} />\n      <div className=\"element__text\">\n        <h2 className=\"element__title\">{card.name}</h2>\n        <div className=\"element__likes\">\n          <button\n                  className={cardLikeButtonClassName}\n                  type=\"button\"\n                  aria-label=\"Like Image\"\n                  onClick={handleLikeClick}>\n          </button>\n          <p className=\"element__like-count\">{card.likes.length}</p>\n        </div>\n      </div>\n      <button\n              className={cardDeleteButtonClassName}\n              type=\"button\"\n              aria-label=\"Delete Image\"\n              onClick={handleDeleteClick}>\n      </button>\n    </li>\n  );\n}\n\nCard.propTypes = {\n  /** An *object* having single card data returned from the *API* */\n  card                : PropTypes.object.isRequired,\n  /** A *callback function* that handles click event on the image card */\n  onCardClick         : PropTypes.func.isRequired,\n  /** A *callback function* that handles click event on the like button */\n  onCardLike          : PropTypes.func.isRequired,\n  /** A *callback function* that handles click event on the delete button */\n  onCardDeleteClick   : PropTypes.func.isRequired,\n};\n\nexport default Card;","import React                from 'react';\nimport PropTypes            from 'prop-types';\nimport Card                 from './Card';\nimport CurrentUserContext   from '../contexts/CurrentUserContext';\n\n/**\n * The **Main** component representing the main content of the webpage.\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction Main(props) {\n  const { cards } = props;\n  const {\n    onEditProfileClick,\n    onAddPlaceClick,\n    onEditAvatarClick,\n    onCardClick,\n    onCardDeleteClick,\n    onCardLike,\n  } = props;\n\n  const currentUser = React.useContext(CurrentUserContext);\n\n  return (\n    <main className=\"content\">\n      {/* section containing user info, functionality to edit it and to add new images */}\n      <section className=\"profile\">\n        <div className=\"profile__avatar-container\">\n          <img className=\"profile__avatar\" src={currentUser.avatar} alt=\"profile avatar\" />\n          <button\n                  className=\"profile__avatar-update-button\"\n                  type=\"button\"\n                  aria-label=\"Update Profile Picture\"\n                  onClick={onEditAvatarClick}>\n          </button>\n        </div>\n        <div className=\"profile__info\">\n          <div className=\"profile__main-content\">\n            <h1 className=\"profile__title\">{currentUser.name}</h1>\n            <button\n                    className=\"profile__edit-btn\"\n                    type=\"button\"\n                    aria-label=\"Edit Profile\"\n                    onClick={onEditProfileClick}>\n            </button>\n          </div>\n          <p className=\"profile__subtitle\">{currentUser.about}</p>\n        </div>\n        <button\n                className=\"profile__add-btn\"\n                type=\"button\"\n                aria-label=\"Add Image\"\n                onClick={onAddPlaceClick}>\n        </button>\n      </section>\n\n      {/* section containing all the cards having images and functionality to like/unlike */}\n      <section>\n        <ul className=\"elements\">\n          {cards.map(card =>\n            <Card\n              key={card._id}\n              card={card}\n              onCardClick={onCardClick}\n              onCardLike={onCardLike}\n              onCardDeleteClick={onCardDeleteClick} />)}\n        </ul>\n      </section>\n    </main>\n  );\n}\n\nMain.propTypes = {\n  /** An *array* of the existing cards fetched from the server */\n  cards: PropTypes.array.isRequired,\n  /** A *callback function* that handles click on edit profile button */\n  onEditProfileClick: PropTypes.func.isRequired,\n  /** A *callback function* that handles click on add new place button */\n  onAddPlaceClick   : PropTypes.func.isRequired,\n  /** A *callback function* that handles click on edit avatar button */\n  onEditAvatarClick : PropTypes.func.isRequired,\n  /** A *callback function* that handles click on image card */\n  onCardClick       : PropTypes.func.isRequired,\n  /** A *callback function* that handles click on trash icon on the image card */\n  onCardDeleteClick : PropTypes.func.isRequired,\n  /** A *callback function* that handles click on like button */\n  onCardLike        : PropTypes.func.isRequired,\n}\n\nexport default Main;","import React      from 'react';\nimport PropTypes  from 'prop-types';\n\n/**\n * The **ImagePopup** component representing image preview popup\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction ImagePopup(props) {\n  const {card, onClose} = props;\n  return (\n    <div className={`popup popup_rel_image ${card && 'popup_opened'}`}>\n      <div className=\"popup__container popup__container_rel_image\">\n        <figure className=\"popup__figure\">\n          <img className=\"popup__img\" src={`${card && card.link}`} alt={`${card && card.name}`} />\n          <figcaption className=\"popup__caption\">{`${card && card.name}`}</figcaption>\n        </figure>\n        <button\n                className=\"popup__close-btn popup__close-btn_rel_image\"\n                type=\"button\"\n                onClick={onClose}\n                aria-label=\"Close popup\">\n        </button>\n      </div>\n    </div>\n  );\n}\n\nImagePopup.propTypes = {\n  /** An *object* having selected card data */\n  card    : PropTypes.object,\n  /** A *callback function* that handles closing of the popup */\n  onClose : PropTypes.func.isRequired,\n}\n\nexport default ImagePopup;","import React      from 'react';\nimport PropTypes  from 'prop-types';\n\n/**\n * The **PopupWithForm** component representing a popup with a form in it\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction PopupWithForm(props) {\n  const { children }                        = props;\n  const { onClose, onSubmit }               = props;\n  const { name, title, btnLabel, isOpen }   = props;\n  const formRef                             = React.createRef();\n  const [isFormValid, setIsFormValid]       = React.useState(false);\n\n  React.useEffect(() => {\n    setIsFormValid(formRef.current.checkValidity());\n  }, [isOpen, formRef]);\n\n  const handleChange = () => {\n    setIsFormValid(formRef.current.checkValidity());\n  }\n\n  return (\n    <div className={`popup popup_rel_${name} ${isOpen && 'popup_opened'}`}>\n    <div className=\"popup__container\">\n      <form\n        className=\"popup__form\"\n        name={name}\n        action=\"#\"\n        ref={formRef}\n        onSubmit={onSubmit}\n        onChange={handleChange}\n        noValidate>\n        <h2 className={`popup__title popup__title_rel_${name}`}>{title}</h2>\n        {children}\n        <button\n                className={`popup__submit popup__submit_rel_${name} ${!isFormValid && `popup__submit_disabled`}`}\n                type=\"submit\"\n                aria-label={`${btnLabel} ${name}`}>\n          {btnLabel}\n        </button>\n      </form>\n      <button\n              className=\"popup__close-btn\"\n              type=\"button\"\n              aria-label=\"Close popup\"\n              onClick={onClose}>\n      </button>\n    </div>\n  </div>\n  );\n}\n\nPopupWithForm.propTypes = {\n  /** Any form elements like input, label, etc */\n  children  : PropTypes.any,\n  /** A *callback function* that handles closing of the popup */\n  onClose   : PropTypes.func.isRequired,\n  /** A *callback function* that handles the form submit */\n  onSubmit   : PropTypes.func.isRequired,\n  /** A string representing the **name of the form** */\n  name      : PropTypes.string.isRequired,\n  /** A string representing the **title of the form** */\n  title     : PropTypes.string.isRequired,\n  /** A string representing the **label** of the Submit button */\n  btnLabel  : PropTypes.string.isRequired,\n  /** A boolean indicating if the popup is open or closed */\n  isOpen    : PropTypes.bool,\n}\n\nexport default PopupWithForm;","import React                from 'react';\nimport PropTypes            from 'prop-types';\nimport PopupWithForm        from './PopupWithForm';\nimport CurrentUserContext   from '../contexts/CurrentUserContext';\n\n/**\n * The **EditProfilePopup** component representing a popup with a form to update the current user data\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction EditProfilePopup(props) {\n  const {isOpen, isDataLoading, onClose, onUpdateUser}        = props;\n  const [name, setName]                                       = React.useState('');\n  const [description, setDescription]                         = React.useState('');\n  const [isNameValid, setIsNameValid]                         = React.useState(true);\n  const [isDescriptionValid, setIsDescriptionValid]           = React.useState(true);\n  const [nameErrorMessage, setNameErrorMessage]               = React.useState('');\n  const [descriptionErrorMessage, setDescriptionErrorMessage] = React.useState('');\n  const currentUser                                           = React.useContext(CurrentUserContext);\n\n  React.useEffect(() => {\n    setName(currentUser.name || '');\n    setDescription(currentUser.about || '');\n    setIsNameValid(true);\n    setIsDescriptionValid(true);\n    setNameErrorMessage('');\n    setDescriptionErrorMessage('');\n  }, [currentUser, isOpen]);\n\n  const handleInputChange = e => {\n    const {name, value, validity, validationMessage} = e.target;\n    switch (name) {\n      case 'title' : {\n        setName(value);\n        setIsNameValid(validity.valid);\n        (!validity.valid) && setNameErrorMessage(validationMessage);\n        break;\n      }\n      case 'subtitle': {\n        setDescription(value);\n        setIsDescriptionValid(validity.valid);\n        (!validity.valid) && setDescriptionErrorMessage(validationMessage);\n        break;\n      }\n      default: break;\n    }\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onUpdateUser({\n      name,\n      about: description,\n    });\n  }\n\n  return (\n    <PopupWithForm\n      name=\"profile\"\n      title=\"Edit profile\"\n      btnLabel={(isDataLoading) ? 'Saving': 'Save'}\n      isOpen={isOpen}\n      onClose={onClose}\n      onSubmit={handleSubmit} >\n      <input\n        className={`popup__input ${(!isNameValid) && `popup__input_type_error`}`}\n        type=\"text\"\n        id=\"name-input\"\n        name=\"title\"\n        placeholder=\"Name\"\n        minLength=\"2\"\n        maxLength=\"40\"\n        onChange={handleInputChange}\n        value={name}\n        required />\n      <span\n        id=\"name-input-error\"\n        className={`popup__error ${(!isNameValid) && `popup__error_visible`}`}>\n          {nameErrorMessage}\n        </span>\n      <input\n        className={`popup__input ${(!isDescriptionValid) && `popup__input_type_error`}`}\n        type=\"text\"\n        id=\"about-input\"\n        name=\"subtitle\"\n        placeholder=\"About me\"\n        minLength=\"2\"\n        maxLength=\"200\"\n        onChange={handleInputChange}\n        value={description}\n        required />\n      <span\n        id=\"about-input-error\"\n        className={`popup__error ${(!isDescriptionValid) && `popup__error_visible`}`}>\n          {descriptionErrorMessage}\n        </span>\n    </PopupWithForm>\n  );\n}\n\nEditProfilePopup.propTypes = {\n  /** A boolean indicating if the popup is open or closed */\n  isOpen          : PropTypes.bool.isRequired,\n  /** A boolean indicating if the data is getting processed and loaded */\n  isDataLoading   : PropTypes.bool.isRequired,\n  /** A *callback function* that handles closing of the popup */\n  onClose         : PropTypes.func.isRequired,\n  /** A *callback function* that submits the `PATCH` request to the API for updating the current user data  */\n  onUpdateUser    : PropTypes.func.isRequired,\n}\n\nexport default EditProfilePopup;","import React            from 'react';\nimport PropTypes        from 'prop-types';\nimport PopupWithForm    from './PopupWithForm';\n\n/**\n * The **EditAvatarPopup** component representing a popup with a form to edit user avatar\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction EditAvatarPopup(props) {\n  const {isOpen, isDataLoading, onClose, onUpdateAvatar}  = props;\n  const [isImageLinkValid, setIsImageLinkValid]           = React.useState(true);\n  const [imageLinkErrorMessage, setImageLinkErrorMessage] = React.useState('');\n  const imageLinkInputRef                                 = React.useRef();\n\n  React.useEffect(() => {\n    imageLinkInputRef.current.value = '';\n    setIsImageLinkValid(true);\n  }, [isOpen]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onUpdateAvatar(imageLinkInputRef.current.value);\n  }\n\n  const handleCheckValidity = e => {\n    setIsImageLinkValid(e.target.validity.valid);\n    setImageLinkErrorMessage(imageLinkInputRef.current.validationMessage);\n  }\n\n  return (\n    <PopupWithForm\n      name=\"avatar\"\n      title=\"Change Profile Picture\"\n      btnLabel={(isDataLoading) ? 'Saving': 'Save'}\n      isOpen={isOpen}\n      onClose={onClose}\n      onSubmit={handleSubmit} >\n      <input\n        className={`popup__input ${(!isImageLinkValid) && `popup__input_type_error`}`}\n        type=\"url\"\n        id=\"avatarlink-input\"\n        name=\"avatarlink\"\n        placeholder=\"Image link\"\n        ref={imageLinkInputRef}\n        onChange={handleCheckValidity}\n        required />\n      <span\n        id=\"avatarlink-input-error\"\n        className={`popup__error ${(!isImageLinkValid) && `popup__error_visible`}`}>\n          {imageLinkErrorMessage}\n        </span>\n    </PopupWithForm>\n  );\n}\n\nEditAvatarPopup.propTypes = {\n  /** A boolean indicating if the popup is open or closed */\n  isOpen          : PropTypes.bool.isRequired,\n  /** A boolean indicating if the data is getting processed and loaded */\n  isDataLoading   : PropTypes.bool.isRequired,\n  /** A *callback function* that handles closing of the popup */\n  onClose         : PropTypes.func.isRequired,\n  /** A *callback function* that submits the `PATCH` request to the API for updating the current user's avatar  */\n  onUpdateAvatar  : PropTypes.func.isRequired,\n}\n\nexport default EditAvatarPopup;","import React          from 'react';\nimport PropTypes      from 'prop-types';\nimport PopupWithForm  from './PopupWithForm';\n\n/**\n * The **AddPlacePopup** component representing a popup with a form to add a new place\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction AddPlacePopup(props){\n  const {isOpen, isDataLoading, onClose, onAddPlace}              = props;\n  const [cardName, setCardName]                                   = React.useState('');\n  const [cardImageLink, setCardImageLink]                         = React.useState('');\n  const [isCardNameValid, setIsCardNameValid]                     = React.useState(true);\n  const [isCardImageLinkValid, setIsCardImageLinkValid]           = React.useState(true);\n  const [cardNameErrorMessage, setCardNameErrorMessage]           = React.useState('');\n  const [cardImageLinkErrorMessage, setCardImageLinkErrorMessage] = React.useState('');\n\n  React.useEffect(() => {\n    setCardName('');\n    setCardImageLink('');\n    setIsCardNameValid(true);\n    setIsCardImageLinkValid(true);\n    setCardNameErrorMessage('');\n    setCardImageLinkErrorMessage('');\n  }, [isOpen]);\n\n  const handleInputChange = e => {\n    const {name, value, validity, validationMessage} = e.target;\n    switch (name) {\n      case 'name' : {\n        setCardName(value);\n        setIsCardNameValid(validity.valid);\n        (!validity.valid) && setCardNameErrorMessage(validationMessage);\n        break;\n      }\n      case 'link': {\n        setCardImageLink(value);\n        setIsCardImageLinkValid(validity.valid);\n        (!validity.valid) && setCardImageLinkErrorMessage(validationMessage);\n        break;\n      }\n      default: break;\n    }\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onAddPlace(cardName, cardImageLink);\n  }\n\n  return (\n    <PopupWithForm\n      name=\"place\"\n      title=\"New Place\"\n      btnLabel={(isDataLoading) ? 'Creating': 'Create'}\n      isOpen={isOpen}\n      onClose={onClose}\n      onSubmit={handleSubmit}>\n      <input\n        className={`popup__input ${(!isCardNameValid) && `popup__input_type_error`}`}\n        type=\"text\"\n        id=\"place-input\"\n        name=\"name\"\n        placeholder=\"Title\"\n        minLength=\"1\"\n        maxLength=\"30\"\n        value={cardName}\n        onChange={handleInputChange}\n        required />\n      <span\n        id=\"place-input-error\"\n        className={`popup__error ${(!isCardNameValid) && `popup__error_visible`}`}>\n          {cardNameErrorMessage}\n        </span>\n\n      <input\n        className={`popup__input ${(!isCardImageLinkValid) && `popup__input_type_error`}`}\n        type=\"url\"\n        id=\"link-input\"\n        name=\"link\"\n        placeholder=\"Image link\"\n        value={cardImageLink}\n        onChange={handleInputChange}\n        required />\n      <span\n        id=\"link-input-error\"\n        className={`popup__error ${(!isCardImageLinkValid) && `popup__error_visible`}`}>\n          {cardImageLinkErrorMessage}\n        </span>\n    </PopupWithForm>\n  );\n}\n\nAddPlacePopup.propTypes = {\n  /** A boolean indicating if the popup is open or closed */\n  isOpen          : PropTypes.bool.isRequired,\n  /** A boolean indicating if the data is getting processed and loaded */\n  isDataLoading   : PropTypes.bool.isRequired,\n  /** A *callback function* that handles closing of the popup */\n  onClose         : PropTypes.func.isRequired,\n  /** A *callback function* that submits the `POST` request to the API for adding a new place  */\n  onAddPlace      : PropTypes.func.isRequired,\n}\n\nexport default AddPlacePopup;","import React          from \"react\";\nimport PropTypes      from 'prop-types';\nimport PopupWithForm  from \"./PopupWithForm\";\n\n/**\n * The **DeletePlacePopup** component representing a popup to confirm the deletion of the selected card\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction DeletePlacePopup(props){\n  const {card, isOpen, isDataLoading, onClose, onCardDelete} = props;\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onCardDelete(card);\n  }\n\n  return (\n    <PopupWithForm\n      name=\"delete\"\n      title=\"Are you sure?\"\n      btnLabel={(isDataLoading) ? 'Deleting': 'Yes'}\n      isOpen={isOpen}\n      onClose={onClose}\n      onSubmit={handleSubmit} />\n  );\n}\n\nDeletePlacePopup.propTypes = {\n  /** A boolean indicating if the popup is open or closed */\n  isOpen          : PropTypes.bool.isRequired,\n  /** A boolean indicating if the data is getting processed and loaded */\n  isDataLoading   : PropTypes.bool.isRequired,\n  /** A *callback function* that handles closing of the popup */\n  onClose         : PropTypes.func.isRequired,\n  /** A *callback function* that submits the `DELETE` request to the API for deleting an existing image card */\n  onCardDelete    : PropTypes.func.isRequired,\n}\n\nexport default DeletePlacePopup;","import React from 'react';\n\n/**\n * The **Footer** component representing the footer of the webpage\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <p className=\"footer__text\">© 2021 Around The U.S.</p>\n    </footer>\n  );\n}\n\nexport default Footer;","/**\n * This module takes care of all the requests made to the API - https://around.nomoreparties.co\n * @module Api\n */\n\n/** Class representing all the API related requests */\nclass Api {\n  /**\n   * Sets the base URL and header authorization token for the API endpoints.\n   * @param {options} obj - An object having the base URL and headers\n   */\n  constructor(options){\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n  }\n\n  /**\n   * Checks the server's response of the Fetch API call to tell whether it was successful or not.\n   * @param {Object} response The response of the Fetch API call.\n   * @return {Object} If the response was successful, returns the JSON else a Promise object with a given reason.\n   */\n  _checkResponseStatus = response => {\n    return (response.ok)\n      ? response.json()\n      : Promise.reject(`Error Code: ${response.status} | Error Message: ${response.statusText}`);\n  }\n\n  /**\n   * Get initial image cards from the server using a GET request.\n   * @return {Promise} The Promise of the Fetch API call.\n   */\n  getInitialCards = () => {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    })\n      .then(this._checkResponseStatus);\n  }\n\n  /**\n   * Adds a new image card to the server using a POST request.\n   * @param {string} cardName The name of the place in the new image card.\n   * @param {string} cardPicUrl The URL of the picture in the new image card.\n   * @return {Promise} The Promise of the Fetch API call.\n   */\n  addNewCard = (cardName, cardPicUrl) => {\n    return fetch(`${this._baseUrl}/cards`,{\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: cardName,\n        link: cardPicUrl\n      })\n    })\n      .then(this._checkResponseStatus);\n  }\n\n  /**\n   * Deletes an existing image card from the server using a DELETE request.\n   * @param {string} cardId The id of image card to be deleted.\n   * @return {Promise} The Promise of the Fetch API call.\n   */\n  deleteCard = cardId => {\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: this._headers\n    })\n      .then(this._checkResponseStatus);\n  }\n\n  /**\n   * Changes the like status of an existing image card from the server using a PUT | DELETE request.\n   * @param {string} cardId The id of image card to be liked.\n   * @param {boolean} isLiked Whether the image card has been liked already\n   * @return {Promise} The Promise of the Fetch API call.\n   */\n  changeLikeCardStatus = (cardId, isLiked) => {\n    const method = (isLiked) ? 'DELETE' : 'PUT';\n    return fetch(`${this._baseUrl}/cards/likes/${cardId}`, {\n      method,\n      headers: this._headers\n    })\n      .then(this._checkResponseStatus);\n  }\n\n  /**\n   * Get the current user data from the server using a GET request.\n   * @return {Promise} The Promise of the Fetch API call.\n   */\n  getUserData = () => {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers,\n    })\n      .then(this._checkResponseStatus);\n  }\n\n  /**\n   * Updates the current user data from the server using a PATCH request.\n   * @param {string} title The new title or name of the current user.\n   * @param {string} subtitle The new subtitle or about info of the current user.\n   * @return {Promise} The Promise of the Fetch API call.\n   */\n  updateUserData = ({name, about}) => {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        about,\n      })\n    })\n      .then(this._checkResponseStatus);\n  }\n\n  /**\n   * Updates the current user's avatar from the server using a PATCH request.\n   * @param {string} newAvatarUrl The new URL of the user avatar.\n   * @return {Promise} The Promise of the Fetch API call.\n   */\n  updateUserAvatar = newAvatarUrl => {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: newAvatarUrl\n      })\n    })\n      .then(this._checkResponseStatus);\n  }\n}\n\nexport default new Api({\n  baseUrl: \"https://around.nomoreparties.co/v1/group-12\",\n  headers: {\n    authorization: \"9bc9c0f1-5a8a-40aa-b985-20e7b24d1389\",\n    \"Content-Type\": \"application/json\"\n  }\n});","import React                from 'react';\nimport Header               from './Header';\nimport Main                 from './Main';\nimport ImagePopup           from './ImagePopup';\nimport EditProfilePopup     from './EditProfilePopup';\nimport EditAvatarPopup      from './EditAvatarPopup';\nimport AddPlacePopup        from './AddPlacePopup';\nimport DeletePlacePopup     from './DeletePlacePopup';\nimport Footer               from './Footer';\nimport api                  from '../utils/api';\nimport CurrentUserContext   from '../contexts/CurrentUserContext';\n\n/**\n * The main React **App** component.\n *\n * @version 1.0.0\n * @author [Shraddha](https://github.com/5hraddha)\n */\nfunction App() {\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen]   = React.useState(false);\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen]     = React.useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen]         = React.useState(false);\n  const [isPreviewPlacePopupOpen, setIsPreviewPlacePopupOpen] = React.useState(false);\n  const [isDeletePlacePopupOpen, setIsDeletePlacePopupOpen]   = React.useState(false);\n  const [isDataLoading, setIsDataLoading]                     = React.useState(false);\n  const [selectedCard, setSelectedCard]                       = React.useState(null);\n  const [selectedToDeleteCard, setSelectedToDeleteCard]       = React.useState(null);\n  const [currentUser, setCurrentUser]                         = React.useState({});\n  const [cards, setCards]                                     = React.useState([]);\n\n  React.useEffect(() => {\n    api\n      .getInitialCards()\n        .then(setCards)\n        .catch(err => {\n          console.log(\"Uh-oh! Error occured while fetching the existing cards from the server.\");\n          console.log(err);\n        });\n  }, []);\n\n  React.useEffect(() => {\n    api\n      .getUserData()\n      .then(res => setCurrentUser(res))\n      .catch(err => {\n        console.log(\"Uh-oh! Error occured while fetching the current user data from the server.\");\n        console.log(err);\n      });\n  }, []);\n\n  React.useEffect(() => {\n    const handleClickClose = e => {\n      if(e.target.classList.contains('popup_opened')) {\n        closeAllPopups();\n      }\n    }\n\n    const handleEscClose = e => {\n      if(e.key === \"Escape\"){\n        closeAllPopups();\n      }\n    }\n\n    if(isEditProfilePopupOpen\n      || isEditAvatarPopupOpen\n      || isAddPlacePopupOpen\n      || isPreviewPlacePopupOpen\n      || isDeletePlacePopupOpen){\n        document.addEventListener(\"click\", handleClickClose);\n        document.addEventListener(\"keydown\", handleEscClose);\n      }\n\n    return () => {\n      document.removeEventListener(\"click\", handleClickClose);\n      document.removeEventListener(\"keydown\", handleEscClose);\n    }\n  }, [isEditProfilePopupOpen,\n    isEditAvatarPopupOpen,\n    isAddPlacePopupOpen,\n    isPreviewPlacePopupOpen,\n    isDeletePlacePopupOpen] );\n\n  const closeAllPopups = () => {\n    setIsEditProfilePopupOpen(false);\n    setIsEditAvatarPopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setIsPreviewPlacePopupOpen(false);\n    setIsDeletePlacePopupOpen(false);\n    setSelectedCard(null);\n    setSelectedToDeleteCard(null);\n  }\n\n  const handleEditProfileClick = () => setIsEditProfilePopupOpen(true);\n  const handleEditAvatarClick = () => setIsEditAvatarPopupOpen(true);\n  const handleAddPlaceClick = () => setIsAddPlacePopupOpen(true);\n\n  const handleCardClick = card => {\n    setSelectedCard(card);\n    setIsPreviewPlacePopupOpen(true);\n  };\n\n  const handleCardDeleteClick = card => {\n    setSelectedToDeleteCard(card);\n    setIsDeletePlacePopupOpen(true);\n  };\n\n  const handleCardLike = card => {\n    const isLiked = card.likes.some(i => i._id === currentUser._id);\n    api\n      .changeLikeCardStatus(card._id, isLiked)\n        .then(newCard =>\n          setCards(state => state.map(c => c._id === card._id ? newCard : c)))\n        .catch(err => {\n          console.log(\"Uh-oh! Error occured while changing the like status of the card.\");\n          console.log(err);\n        });\n  }\n\n  const handleCardDeleteSubmit = card => {\n    setIsDataLoading(true);\n    api\n      .deleteCard(card._id)\n        .then(() => {\n          setCards(state => state.filter(c => c._id !== card._id));\n          closeAllPopups();\n        })\n        .catch(err => {\n          console.log(\"Uh-oh! Error occured while deleting the selected card from the server.\");\n          console.log(err);\n        })\n        .finally(() => setIsDataLoading(false));\n  }\n\n  const handleUpdateUser = userData => {\n    setIsDataLoading(true);\n    api\n      .updateUserData(userData)\n      .then(updatedUserData => {\n        setCurrentUser(updatedUserData);\n        closeAllPopups();\n      })\n      .catch(err => {\n        console.log(\"Uh-oh! Error occured while updating the user data to the server.\");\n        console.log(err);\n      })\n      .finally(() => setIsDataLoading(false));\n  }\n\n  const handleUpdateAvatar = newAvatarUrl => {\n    setIsDataLoading(true);\n    api\n      .updateUserAvatar(newAvatarUrl)\n      .then(updatedUserData => {\n        setCurrentUser(updatedUserData);\n        closeAllPopups();\n      })\n      .catch(err => {\n        console.log(\"Uh-oh! Error occured while updating the user avatar to the server.\");\n        console.log(err);\n      })\n      .finally(() => setIsDataLoading(false));\n  }\n\n  const handleAddPlaceSubmit = (cardName, cardImageLink) => {\n    setIsDataLoading(true);\n    api\n      .addNewCard(cardName, cardImageLink)\n      .then(newCard => {\n        setCards([newCard, ...cards]);\n        closeAllPopups();\n      })\n      .catch(err => {\n        console.log(\"Uh-oh! Error occured while adding a new card to the server.\");\n        console.log(err);\n      })\n      .finally(() => setIsDataLoading(false));\n  }\n\n  return (\n    <CurrentUserContext.Provider value={currentUser}>\n      <div className=\"page\">\n        <div className=\"page__wrapper\">\n          <Header />\n\n          <Main\n            onEditProfileClick={handleEditProfileClick}\n            onAddPlaceClick={handleAddPlaceClick}\n            onEditAvatarClick={handleEditAvatarClick}\n            onCardClick={handleCardClick}\n            onCardDeleteClick={handleCardDeleteClick}\n            onCardLike={handleCardLike}\n            cards={cards}\n          />\n\n          <Footer />\n\n          <EditAvatarPopup\n            isOpen={isEditAvatarPopupOpen}\n            isDataLoading={isDataLoading}\n            onClose={closeAllPopups}\n            onUpdateAvatar={handleUpdateAvatar} />\n\n          <EditProfilePopup\n            isOpen={isEditProfilePopupOpen}\n            isDataLoading={isDataLoading}\n            onClose={closeAllPopups}\n            onUpdateUser={handleUpdateUser} />\n\n          <AddPlacePopup\n            isOpen={isAddPlacePopupOpen}\n            isDataLoading={isDataLoading}\n            onClose={closeAllPopups}\n            onAddPlace={handleAddPlaceSubmit} />\n\n          <ImagePopup card={selectedCard} onClose={closeAllPopups} />\n\n          <DeletePlacePopup\n            card={selectedToDeleteCard}\n            isOpen={isDeletePlacePopupOpen}\n            isDataLoading={isDataLoading}\n            onClose={closeAllPopups}\n            onCardDelete={handleCardDeleteSubmit} />\n        </div>\n      </div>\n    </CurrentUserContext.Provider>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}